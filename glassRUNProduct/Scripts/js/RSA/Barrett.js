function BarrettMu(b){this.modulus=biCopy(b);this.k=biHighIndex(this.modulus)+1;var a=new BigInt();a.digits[2*this.k]=1;this.mu=biDivide(a,this.modulus);this.bkplus1=new BigInt();this.bkplus1.digits[this.k+1]=1;this.modulo=BarrettMu_modulo;this.multiplyMod=BarrettMu_multiplyMod;this.powMod=BarrettMu_powMod}function BarrettMu_modulo(i){var a=biDivideByRadixPower(i,this.k-1);var b=biMultiply(a,this.mu);var c=biDivideByRadixPower(b,this.k+1);var e=biModuloByRadixPower(i,this.k+1);var g=biMultiply(c,this.modulus);var f=biModuloByRadixPower(g,this.k+1);var d=biSubtract(e,f);if(d.isNeg){d=biAdd(d,this.bkplus1)}var h=biCompare(d,this.modulus)>=0;while(h){d=biSubtract(d,this.modulus);h=biCompare(d,this.modulus)>=0}return d}function BarrettMu_multiplyMod(a,c){var b=biMultiply(a,c);return this.modulo(b)}function BarrettMu_powMod(e,f){var d=new BigInt();d.digits[0]=1;var b=e;var c=f;while(true){if((c.digits[0]&1)!=0){d=this.multiplyMod(d,b)}c=biShiftRight(c,1);if(c.digits[0]==0&&biHighIndex(c)==0){break}b=this.multiplyMod(b,b)}return d};